package ch.interlis.ili2c;

import java.io.*;
import ch.interlis.ili2c.metamodel.TransferDescription;
import ch.interlis.ili2c.metamodel.ErrorListener;
import ch.interlis.ili2c.parser.Ili2Parser;
import java.util.List;
import java.util.LinkedList;
import java.util.Iterator;
import java.util.ArrayList;
import ch.ehi.basics.logging.EhiLogger;
import ch.interlis.ili2c.config.*;

public class Main
{
  private static String version=null;
  protected static boolean hasArg(String v1, String v2, String[] args) {
    for (int i = 0; i < args.length; i++) {
      if (args[i].equals(v1) || args[i].equals(v2))
        return true;
    }
    return false;
  }

  protected static void printVersion ()
  {
    System.err.println("INTERLIS Compiler, Version "+getVersion());
    System.err.println("  Distributed by the Coordination of Geographic Information");
    System.err.println("  and Geographic Information Systems Group (COSIG), CH-3084 Wabern");
    System.err.println("  Developed by Adasys AG, CH-8006 Zurich");
    System.err.println("  Maintained by Eisenhut Informatik AG, CH-3303 Jegenstorf");
    System.err.println("  See http://www.interlis.ch for information about INTERLIS");
    System.err.println("  Parts of this program have been generated by ANTLR; see http://www.antlr.org");
    System.err.println("  This product includes software developed by the");
    System.err.println("  Apache Software Foundation (http://www.apache.org/).");
  }


  protected static void printDescription ()
  {
    System.err.println("DESCRIPTION");
    System.err.println("  Parses and compiles INTERLIS Version 2.2 data model definitions.");
    System.err.println("  Other options include conversion from INTERLIS Version 1 and back");
    System.err.println("  (option -o1) and generation of an XML-Schema, released 2001 (option -oXSD).");
  }


  protected static void printUsage (String progName)
  {
    System.err.println ("USAGE");
    System.err.println("  " + progName + " [Options] file1.ili -m meta1.xml file2.ili ...");
  }


  protected static void printExamples (String progName)
  {
    System.err.println ("EXAMPLES");
    System.err.println ();
    System.err.println ("Check whether an INTERLIS definition in \"file1.ili\" is valid:");
    System.err.println ("    " + progName + " file1.ili");
    System.err.println ();
    System.err.println ("Check whether a definition distributed over several files is valid:");
    System.err.println ("    " + progName + " file1.ili file2.ili");
    System.err.println ();
    System.err.println ("Generate an INTERLIS-1 definition:");
    System.err.println ("    " + progName + " -o1 file1.ili file2.ili");
    System.err.println ();
    System.err.println ("Generate an INTERLIS-2 definition:");
    System.err.println ("    " + progName + " -o2 file1.ili file2.ili");
    System.err.println ();
    System.err.println ("Generate a definition of the predefined MODEL INTERLIS:");
    System.err.println ("    " + progName + " -o2 --with-predefined");
    System.err.println ();
    System.err.println ("Generate an XML-Schema:");
    System.err.println ("    " + progName + " -oXSD file1.ili file2.ili");
    System.err.println ();
    System.err.println ("Check whether two definitions are equivalent (e.g. de->fr):");
    System.err.println ("    " + progName + " de_1.ili de_2.ili -c fr_1.ili fr_2.ili");
  }


  private static class MyErrorListener implements ch.interlis.ili2c.metamodel.ErrorListener
  {
    int numSupressed = 0;
    int severityLevel = 0;

    public void setSeverityLevel (int level)
    {
      severityLevel = level;
    }

    public void error (ErrorListener.ErrorEvent evt)
    {
      if (evt.getSeverity () < severityLevel)
        numSupressed = numSupressed + 1;
      else{
        System.err.println (evt.toString ());
        if(evt.getException()!=null){
			evt.getException().printStackTrace(ch.interlis.ili2c.metamodel.Trace.getTraceStream());
        }
      }
    }
  };
  public static void main (String[] args)
  {
    boolean emitPredefined = false;
    int     emitVersion = 0;
    boolean emitXSD = false;
    boolean emitFMT = false;
    boolean emitJAVA = false;
	boolean emitIOM = false;
    boolean checkMetaObjs=false;
    int     numErrorsWhileGenerating = 0;
    String  progName = "ili2c";
    List    descriptions = new LinkedList ();
    TransferDescription   mainDescription = new TransferDescription ();
    TransferDescription   curDescription = mainDescription;
    String  notifyOnError = "compiler@interlis.ch";


	if(args.length==0){
	        ch.interlis.ili2c.gui.Main.main(args);
		return;
	}
    descriptions.add (mainDescription);

    if (hasArg ("-u", "--usage", args))
    {
      printUsage (progName);
      return;
    }

    if (hasArg("-h", "--help", args)
        || args.length == 0)
    {
      printVersion ();
      System.err.println();
      printDescription ();
      System.err.println();
      printUsage (progName);
      System.err.println();
      System.err.println("OPTIONS");
      System.err.println();
      System.err.println("-o0                   Generate no output (default).");
      System.err.println("-o1                   Generate INTERLIS-1 output.");
      System.err.println("-o2                   Generate INTERLIS-2 output.");
      System.err.println("-oXSD                 Generate an XML-Schema.");
      System.err.println("-oFMT                 Generate an INTERLIS-1 Format.");
      System.err.println("-oJAVA                Generate JAVA classes.");
	  System.err.println("-oIOM                 Generate Model as INTERLIS-Transfer (XTF).");
      System.err.println("-c|--compare-with     Compare two or more model definitions.");
      System.err.println("--check-metaobj       Check if referenced metaobjects exist.");
      System.err.println("-boid Model.Basket=BOID  Define a mapping from a qualified basket");
      System.err.println("                      name to a BOID of a metadata container.");
      System.err.println("--with-predefined     Include the predefined MODEL INTERLIS in");
      System.err.println("                      the output. Usually, this is omitted.");
      System.err.println("--without-warnings    Report only errors, no warnings. Usually,");
      System.err.println("                      warnings are generated as well.");
      System.err.println("-h|--help             Display this help text.");
      System.err.println("-u|--usage            Display short information about usage.");
      System.err.println("-v|--version          Display the version of " + progName + ".");
      System.err.println();
      printExamples (progName);
      return;
    }

    if (hasArg("-v", "--version", args))
    {
      printVersion ();
      return;
    }

    try {
      MyErrorListener el = new MyErrorListener();

      for (int i = 0; i < args.length; i++)
      {
        java.io.InputStream stream;
        String              streamName;

        if (args[i].equals("--with-predefined"))
        {
          emitPredefined = true;
          continue;
        }
        if (args[i].equals("--check-metaobj"))
        {
          checkMetaObjs = true;
          continue;
        }
        else if (args[i].equals("-o0"))
        {
          emitVersion = 0;
          emitXSD = false;
          emitFMT = false;
          emitJAVA = false;
		  emitIOM = false;
          continue;
        }
        else if (args[i].equals("-o1"))
        {
          emitVersion = 1;
          emitXSD = false;
          emitFMT = false;
          emitJAVA = false;
		  emitIOM = false;
          continue;
        }
        else if (args[i].equals("-o2"))
        {
          emitVersion = 2;
          emitXSD = false;
          emitFMT = false;
          emitJAVA = false;
		  emitIOM = false;
          continue;
        }
        else if (args[i].equals("-oXSD"))
        {
          emitVersion = 0;
          emitXSD = true;
          emitFMT = false;
          emitJAVA = false;
		  emitIOM = false;
          continue;
        }
        else if (args[i].equals("-oFMT"))
        {
          emitVersion = 0;
          emitXSD = false;
          emitFMT = true;
          emitJAVA = false;
		  emitIOM = false;
          continue;
        }
        else if (args[i].equals("-oJAVA"))
        {
          emitVersion = 0;
          emitXSD = false;
          emitFMT = false;
          emitJAVA = true;
		  emitIOM = false;
          continue;
        }
		else if (args[i].equals("-oIOM"))
		{
		  emitVersion = 0;
		  emitXSD = false;
		  emitFMT = false;
		  emitJAVA = false;
		  emitIOM = true;
		  continue;
		}
        else if (args[i].equals("-"))
        {
          stream = new DataInputStream (System.in);
          streamName = null;
        }
        else if (args[i].equals ("--compare-with") || args[i].equals ("-c"))
        {
          curDescription = new TransferDescription ();
          descriptions.add (curDescription);
          continue;
        }
        else if (args[i].equals ("--without-warnings"))
        {
          el.setSeverityLevel (ErrorListener.ErrorEvent.SEVERITY_ERROR);
          continue;
        }
        else if (args[i].equals ("--with-warnings"))
        {
          el.setSeverityLevel (0);
          continue;
        }
        else if (args[i].equals ("-m"))
        {
        	if(i+1>=args.length){
	          System.err.println (progName + ":after -m is an argument (file.xml) required");
	          continue;
        	}
          if(checkMetaObjs){
            /* Don't continue if there is a fatal error. */
            if(!ch.interlis.ili2c.parser.MetaObjectParser.parse (
              curDescription, args[i+1], /* error listener */ el))
            	return;
          }
          ++i;
          continue;
        }
        else if (args[i].equals ("-boid"))
        {
        	if(i+1>=args.length){
	          System.err.println (progName + ":after -boid is an argument of the form basketName=boid required");
	          continue;
        	}
          int eqpos=args[i+1].indexOf('=');
          if(eqpos==-1){
          		// report illegal argument
	          System.err.println (progName + ":after -boid is an argument of the form basketName=boid required; but found " + args[i]);
	          ++i;
	          continue;
          }
          String qualifiedBasketName=args[i+1].substring(0,eqpos);
          String boid=args[i+1].substring(eqpos+1);
          curDescription.addMetadataMapping(qualifiedBasketName,boid);
          ++i;
          continue;
        }
        else if (args[i].charAt(0) == '-')
        {
          System.err.println (progName + ":Unknown option: " + args[i]);
          continue;
        }
        else
        {
          streamName = args[i];
          stream = null;
          try {
            stream = new FileInputStream(args[i]);
          } catch (java.io.FileNotFoundException fnfex) {
            System.err.println (args[i] + ":" + "There is no such file.");
          } catch (Exception ex) {
            throw ex;
          }
        }

        if (stream != null)
        {
          if (!Ili2Parser.parseIliFile (curDescription,streamName, stream, el,checkMetaObjs)){
            stream.close();
            return;
          }
          stream.close();
        }
      }

      switch (emitVersion)
      {
      case 1:
        numErrorsWhileGenerating = ch.interlis.ili2c.generator.Interlis1Generator.generate(
          new java.io.PrintWriter(System.out), mainDescription);
        break;

      case 2:
        numErrorsWhileGenerating = ch.interlis.ili2c.generator.Interlis2Generator.generate(
          new java.io.PrintWriter(System.out), mainDescription, emitPredefined);
        break;

      default:
	  java.io.PrintWriter out=new java.io.PrintWriter(System.out);
		if (emitXSD) {
			numErrorsWhileGenerating =
				ch.interlis.ili2c.generator.XSDGenerator.generate(
					out,
					mainDescription);
		} else if (emitFMT) {
			numErrorsWhileGenerating =
				ch.interlis.ili2c.generator.Interlis1Generator.generateFmt(
					out,
					mainDescription);
		} else if (emitJAVA) {
			numErrorsWhileGenerating =
				ch.interlis.ili2c.generator.java.JavaGenerator.generate(
					mainDescription,
					"",
					"");
		} else if (emitIOM) {
			numErrorsWhileGenerating =
				ch.interlis.ili2c.generator.iom.IomGenerator.generate(
					out,
					mainDescription,
					el);
		}
		out.close();
        break;
      }

      if (numErrorsWhileGenerating > 0)
      {
        System.err.println (progName + ":While generating output, errors have occured.");
        System.err.println (progName + ":Those places, " + Integer.toString (numErrorsWhileGenerating)
          + " in number, have been marked with "
          + ch.interlis.ili2c.metamodel.Element.makeErrorName (null) + ".");
      }

      /* Compare the other descriptions whether they are structurally equivalent
         to the first one.
      */
      if (descriptions.size () > 1)
      {
        Iterator iter = descriptions.iterator ();
        TransferDescription mainDesc = (TransferDescription) iter.next ();

        while (iter.hasNext ())
        {
          TransferDescription curDesc = (TransferDescription) iter.next ();

          /* We do not care about whether mismatches have been found. */
          if ((curDesc != null) && !curDesc.checkStructuralEquivalence (mainDesc, el))
            System.err.println ("Structural mismatches have been detected.");
        }
      }

    }
    catch(Exception e)
    {
      System.err.println (progName + ":An internal error has occured. Please notify " + notifyOnError);
      System.err.println ();
      e.printStackTrace ();
    }
  }
  static public TransferDescription runCompiler(Configuration config){
  	return runCompiler(config,new EhiLoggerHandler());
  }
  static public TransferDescription runCompiler(Configuration config,ErrorListener el){
      TransferDescription   desc = new TransferDescription ();
      boolean emitPredefined=config.isIncPredefModel();
      boolean checkMetaObjs=config.isCheckMetaObjs();
		if(el instanceof EhiLoggerHandler){
			((EhiLoggerHandler)el).setGenerateWarnings(config.isGenerateWarnings());
		}
        // boid  to basket mappings
        Iterator boidi=config.iteratorBoidEntry();
        while(boidi.hasNext()){
          BoidEntry e=(BoidEntry)boidi.next();
          desc.addMetadataMapping(e.getMetaDataUseDef(),e.getBoid());
        }


        // model and metadata files
        Iterator filei=config.iteratorFileEntry();
        while(filei.hasNext()){
          FileEntry e=(FileEntry)filei.next();
          if(e.getKind()==FileEntryKind.METADATAFILE){
            if(checkMetaObjs){
              /* Don't continue if there is a fatal error. */
              if(!ch.interlis.ili2c.parser.MetaObjectParser.parse (
                desc, e.getFilename(), /* error listener */ el)){
              	return null;
              }
            }
          }else{
            String streamName = e.getFilename();
            FileInputStream stream = null;
            try {
              stream = new FileInputStream(streamName);
            } catch (java.io.FileNotFoundException ex) {
              //System.err.println (args[i] + ":" + "There is no such file.");
              el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
              return null;
            } catch (Exception ex) {
              el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
              return null;
            }

            if (!Ili2Parser.parseIliFile (desc,streamName, stream, el,checkMetaObjs)){
                try{
                 stream.close();
                }catch(java.io.IOException ex){
                  el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
                }
               return null;
            }
            try{
              stream.close();
            }catch(java.io.IOException ex){
              el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
            }
          }
        }

        // output options
        BufferedWriter out=null;
        switch(config.getOutputKind()){
          case GenerateOutputKind.NOOUTPUT:
            break;
          case GenerateOutputKind.ILI1:
            if("-".equals(config.getOutputFile())){
              out=new BufferedWriter(new OutputStreamWriter(System.out));;
            }else{
              try{
                out = new BufferedWriter(new FileWriter(config.getOutputFile()));
              }catch(IOException ex){
                el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
                return desc;
              }
            }
            ch.interlis.ili2c.generator.Interlis1Generator.generate(
              out, desc);
            break;
          case GenerateOutputKind.ILI2:
            if("-".equals(config.getOutputFile())){
              out=new BufferedWriter(new OutputStreamWriter(System.out));;
            }else{
              try{
                out = new BufferedWriter(new FileWriter(config.getOutputFile()));
              }catch(IOException ex){
                el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
                return desc;
              }
            }
           ch.interlis.ili2c.generator.Interlis2Generator.generate(
              out, desc, emitPredefined);
            break;
          case GenerateOutputKind.XMLSCHEMA:
            if("-".equals(config.getOutputFile())){
              out=new BufferedWriter(new OutputStreamWriter(System.out));;
            }else{
              try{
                out = new BufferedWriter(new FileWriter(config.getOutputFile()));
              }catch(IOException ex){
                  el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
                  return desc;
              }
            }
            ch.interlis.ili2c.generator.XSDGenerator.generate (
              out, desc);
            break;
          case GenerateOutputKind.ILI1FMTDESC:
            if("-".equals(config.getOutputFile())){
              out=new BufferedWriter(new OutputStreamWriter(System.out));;
            }else{
              try{
                out = new BufferedWriter(new FileWriter(config.getOutputFile()));
              }catch(IOException ex){
                el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
                return desc;
              }
            }
            ch.interlis.ili2c.generator.Interlis1Generator.generateFmt(out, desc);
            break;
          case GenerateOutputKind.JAVA:
            ch.interlis.ili2c.generator.java.JavaGenerator.generate(desc, config.getOutputFile(), "");
            break;
		  case GenerateOutputKind.GML32:
			  ch.interlis.ili2c.generator.Gml32Generator.generate(desc, config.getOutputFile(), el);
			  break;
		  case GenerateOutputKind.IOM:
				  if("-".equals(config.getOutputFile())){
					out=new BufferedWriter(new OutputStreamWriter(System.out));;
				  }else{
					try{
					  out = new BufferedWriter(new FileWriter(config.getOutputFile()));
					}catch(IOException ex){
					  el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
					  return desc;
					}
				  }
				ch.interlis.ili2c.generator.iom.IomGenerator.generate(out,desc, el);
				break;
          default:
            // ignore
            break;
        }
        if(out!=null){
          try{
            out.close();
          }catch(java.io.IOException ex){
            el.error(new ErrorListener.ErrorEvent(ex,null,0,ErrorListener.ErrorEvent.SEVERITY_ERROR));
          }
        }
        return desc;
  }
  static public boolean editConfig(Configuration config){
	ch.interlis.ili2c.gui.Main dialog=new ch.interlis.ili2c.gui.Main();
        return dialog.showDialog();
  }
  public static String getVersion() {
        if(version==null){
	  java.util.ResourceBundle resVersion = java.util.ResourceBundle.getBundle("ch/interlis/ili2c/Version");
          // Major version numbers identify significant functional changes.
          // Minor version numbers identify smaller extensions to the functionality.
          // Micro versions are even finer grained versions.
          StringBuffer ret=new StringBuffer(20);
	  ret.append(resVersion.getString("versionMajor"));
          ret.append('.');
	  ret.append(resVersion.getString("versionMinor"));
          ret.append('.');
	  ret.append(resVersion.getString("versionMicro"));
          ret.append('-');
	  ret.append(resVersion.getString("versionDate"));
          version=ret.toString();
        }
        return version;
  }
  /** compiles a set of ili models.
   */
  static public TransferDescription compileIliModels(ArrayList modelv,ArrayList modeldirv,String ilxFile){
	  ch.interlis.ili2c.config.Configuration config=ch.interlis.ili2c.ModelScan.getConfig(modeldirv,modelv);
	  if(config==null){
		  return null;
	  }
	  config.setGenerateWarnings(false);
	  logIliFiles(config);
	  if(ilxFile!=null){
		  config.setOutputKind(ch.interlis.ili2c.config.GenerateOutputKind.IOM);
		  config.setOutputFile(ilxFile);
	  }else{
		  config.setOutputKind(ch.interlis.ili2c.config.GenerateOutputKind.NOOUTPUT);
	  }
	  TransferDescription ret=ch.interlis.ili2c.Main.runCompiler(config);
	  return ret;
  }
  /** compiles a set of ili files.
   */
  static public TransferDescription compileIliFiles(ArrayList filev,ArrayList modeldirv,String ilxFile){

	  ch.interlis.ili2c.config.Configuration config=ch.interlis.ili2c.ModelScan.getConfigWithFiles(modeldirv,filev);
	  if(config==null){
		  return null;
	  }
	  logIliFiles(config);
	  config.setGenerateWarnings(false);
	  if(ilxFile!=null){
		  config.setOutputKind(ch.interlis.ili2c.config.GenerateOutputKind.IOM);
		  config.setOutputFile(ilxFile);
	  }else{
		  config.setOutputKind(ch.interlis.ili2c.config.GenerateOutputKind.NOOUTPUT);
	  }
	  TransferDescription ret=ch.interlis.ili2c.Main.runCompiler(config);
	  return ret;
  }
  static public void logIliFiles(ch.interlis.ili2c.config.Configuration config)
  {
	  java.util.Iterator filei=config.iteratorFileEntry();
	  while(filei.hasNext()){
		  ch.interlis.ili2c.config.FileEntry file=(ch.interlis.ili2c.config.FileEntry)filei.next();
		  EhiLogger.logState("ilifile <"+file.getFilename()+">");
	  }
  }
}

